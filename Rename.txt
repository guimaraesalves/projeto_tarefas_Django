Criando a primeira aplicação

GREGORY PACHECO - CANAL YOUTUBE

1) criando a primeira aplicação
No terminal:
$ python manage.py startapp contas
startapp importantissimo

migrates: banco de dados

Ir para o settings.py e registrar a app!
INSTALLED_APPS = [
'contas',
]


2) Criar o  banco de dados:
TERMINAL:
$ python manage.py migrate

3) ver a aplicação rodando pela primeira vez
TERMINAL:
$ python manage.py runserver
ctrl + c --> parar o servidor

4)criar um super usuário para logar na minha aplicação:
atraves da app que ja vem no django chamada admin(settings.py)
TERMINAL
$ python manage.py createsuperuser
$ UserName (leave blank to use 'django'): Mateus
$ email address: alvesguimaraes45@gmail.com
$ Password: 232025
$ Password (again): 232025

5) Testar a aplicação de novo
TERMINAL:
$ python manage.py runserver

6) aonde fica a aplicação?
fica na urls.py:
urlpatterns = [
    path('admin/', admin.site.urls),
]
Vamos no browser e na url digitar:
http://127.0.0.1:8000/admin
todo o gerenciamento do usuario:
novos usuarios, senhas, etc...

 %%%%%%%%%%% show!!!!!
 ENTENDO URL'S:
 A url pergunta para a view, precisamos atualizar na url
 A REQUEST COMEÇA NA URL E DEPOIS VAI PARA VIEW!!!


TEMOS QUE CRIAR UMA VIEW E INDICAR O CAMINHO NO CODIGO ABAIXO
no arquivo urls.py
from django.contrib import admin
from django.urls import path
from .contas.views import <<nome da view criada>>

urlpatterns = [
    path('admin/', admin.site.urls),
]


AULA9 - ENTENDENDO AS VIEWS

VIEW - trecho de código que define o que vai acontecer

link da documentaçaõ:
https://docs.djangoproject.com

7) Na views.py colocamos uma a função:
from django.http import HttpResponse
import datetime

def data(request):
    now = datetime.datetime.now()
    html = "<html><body>It is now %s.</body></html>" % now
    return HttpResponse(html)

    current_datetime ---> colocar na urls


Depois ir no navegador e colocar 127.0.0.1:8000/contas/


AULA 10 - RETORNANDO UM TEMPLATE
alterando a função na views

def data(request):
    now = datetime.datetime.now()
    #html = "<html><body>It is now %s.</body></html>" % now
    return render(request, 'data.html')

    current_datetime ---> colocar na urls

O template data.html não existe temos que criar:
criar uma pasta templates dentro da APP!---contas
e dentro da nova pasta criada TEMPLATES criar uma pasta
com o mesmo nome da APP (contas)

aí coloca nos parametros de retorno:'contas/home.html'
def data(request):
    now = datetime.datetime.now()
    #html = "<html><body>It is now %s.</body></html>" % now
    return render(request, 'contas/data.html')

Dentro da pasta recem criada CONTAS criar o arquivo html
data.html
html:5 + tab

Voltando na urls.py

urlpatterns = [
    path('admin/', admin.site.urls),
    path('data/', data)
]

AULA 11: ENTENDENDO OS MODELS E CRIANDO O SEU PRIMEIRO MODEL
ler e gravar dados
SITE: https://docs.djangoproject.com/en/2.0/topics/db/models/
uma classe em python que escreve e descreve como serao os dados
categorias, uma classe para cada uma colocando os atributos fields,

no arquivo models.py criar uma classe categoria
digita um nome e coloca uma categoria
https://docs.djangoproject.com/en/3.1/ref/forms/fields/


from django.db import models
class Categoria(models.Model):
    nome = models.CharField(max_length=100)
    dt_criacao = models.DateTimeField(auto_now_add=True)

COMO FAZER PARA IR AO BANCO DE DADOS:
CTRL + C = PARAR O SERVIDOR.

TERMINAL:
$ python manage.py makemigrations
cria um arquivo migrations dentro da pasta conta que descreve como o
o django deve criar as tabelas no banco de dados

TERMINAL: DEPOIS DE CRIAR O MIGRATIONS (makemigrations) rodar o migration
criado
$ python manage.py migrate
 tabela criada,
 para verificar ir no arquivo admin.py importar a classe categoria e executar
 no django admin

 Rodar o server novamente
 $ python manage.py runserver


 AULA 12 - CRIANDO O MODEL TRANSACAO

 No arquivo model criaremos outra classe:

 class Transacao(models.Model):
    data = models.DateTimeField(auto_now_add=True)
    descricao = models.CharField(max_length=200)
    valor = models.Charfield(max_length=200)
    categoria = models.ForeignKey(Categoria)
    observacoes = models.textField()

    class Meta:
        verbose_name_plural = 'Transações'


 APOS CRIAR MAIS UMA CLASSE (TRANSACAO) DE NOVO:
 TERMINAL:
$ python manage.py makemigrations
cria um arquivo migrations dentro da pasta conta que descreve como o
o django deve criar as tabelas no banco de dados

TERMINAL: DEPOIS DE CRIAR O MIGRATIONS (makemigrations) rodar o migration
criado
$ python manage.py migrate

(base) mateus@hank:~/Documentos/GitHub/projeto_tarefas_Django$ python manage.py makemigrations
Migrations for 'contas':
  contas/migrations/0002_transacao.py
    - Create model Transacao


migrate para aplicar
Operations to perform:
  Apply all migrations: admin, auth, contas, contenttypes, sessions
Running migrations:
  Applying contas.0002_transacao... OK


roda o servidor novamente
python manage.py runserver

VOLTA PARA A PASTA admin.py

from django.contrib import admin
from.models import Categoria
from.models import Transacao

admin.site.register(Categoria)
admin.site.register(Transacao)

##### mudar o nome para aparecer o nome da categoria
na models*


AULA 13: APROFUNDANDO NO SISTEMA DE TEMPLATES


AULA 14: DESENVOLVENDO UM CRUD | READ
PRIMEIRA COISA IMPORTAR O MÓDULO NA view.py
from .models import transacao


Criar uma nova view!
contas listagem uma def


AULA 15 - DESENVOLVIMENDO UM CRUD | CREATE
modelform --> docs.djangoproject.com
1ª coisa é criar um arquivo chamado form na pasta templates

e colocar o seguinte código nele:
from django.forms import ModelForm
from .models import Transacao

class TransacaoForm(ModelForm):
    class Meta:
        model = Transacao
        fields = ['categoria', 'descricao','data','observacoes', 'email']


Depois nas views.py chamar ele:


criar outro html no templates/contas (pastas)
form.html
.
.
.
<body>

    <form method="post">
    {% csrf_token %} --> protege o formulário de ataques
    </form>

</body>


%%%%%% AULA 16 - DESENVOLVENDO UM CRUD | UPDATE
1) criar uma nova url:
pasta views.py, aonde ficam as funções:




na pasta urls.py

   from django.contrib import admin
from django.urls import path
from contas.views import data, listagem, nova_transacao, update

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', listagem, name='url_listagem'),
    path('nova/', nova_transacao, name='url_nova'),
    path('update/<int:pk/', update, name='url_update'),
    path('data/', data)
]

%%% AULA 17  -DESENVOLVENDO UM CRUD | DELETE
Começando pela urls.py duplicando o path('update/<int:pk/', update, name='url_update'),
 e muda para delete pois as duas são bem parecidas
 path('delete/<int:pk/', delete, name='url_delete'), --> lembrar de importar

 definir a função na view
 def delete(request, pk),




















































